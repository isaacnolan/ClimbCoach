// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Workout {
  id          String     @id @default(cuid())
  userId      String? // optional, no relation
  name        String
  description String?
  createdAt   DateTime   @default(now())
  scheduledDate DateTime?  
  exercises   Exercise[]
  Progress    Progress[]
}

model User {
  id       String     @id
  email    String     @unique
  name     String?
  // NO: workouts Workout[]   ‚Üê remove if you had this
  Progress Progress[]
}

model Exercise {
  id          String        @id @default(cuid())
  workoutId   String
  workout     Workout       @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  name        String
  sets        Int
  reps        Int?
  duration    Int?
  rest        Int?
  orderIdx    Int?
  ProgressSet ProgressSet[]

  @@index([workoutId])
}

model Progress {
  id        String        @id @default(cuid())
  userId    String
  workoutId String
  user      User          @relation(fields: [userId], references: [id])
  workout   Workout       @relation(fields: [workoutId], references: [id])
  date      DateTime      @default(now())
  notes     String?
  performed Json?
  sets      ProgressSet[]

  @@index([userId])
  @@index([workoutId, date])
}

model ProgressSet {
  id         String   @id @default(cuid())
  progressId String
  progress   Progress @relation(fields: [progressId], references: [id], onDelete: Cascade)
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  setIndex   Int
  weight     Float?
  reps       Int?
  duration   Int?
  rpe        Float?
  notes      String?

  @@unique([progressId, exerciseId, setIndex])
  @@index([progressId])
  @@index([exerciseId])
}
